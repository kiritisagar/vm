name: Docker Container Start

on:
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  authenticate-gcp:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Google Cloud SDK
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: keen-metric-442709-h0
          version: latest
          skip_install: false

      # Step 3: Save GCP service account key to a file
      - name: Save GCP service account key to file
        run: |
          echo "$GCP_KEY_JSON" > $HOME/gcp-key.json
        env:
          GCP_KEY_JSON: ${{ secrets.GCP_KEY_JSON }}

      # Step 4: Authenticate with Google Cloud using the service account key
      - name: Authenticate with Google Cloud
        run: |
          gcloud auth activate-service-account --key-file=$HOME/gcp-key.json
          gcloud config set project keen-metric-442709-h0

      # Step 5: Set up SSH key and ensure public key exists
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GCP_SSH_KEY }}" > ~/.ssh/google_compute_engine
          chmod 600 ~/.ssh/google_compute_engine

          # Check if the public key file exists, generate it if missing
          if [ ! -f ~/.ssh/google_compute_engine.pub ]; then
            echo "Public key not found. Generating from the private key..."
            ssh-keygen -y -f ~/.ssh/google_compute_engine > ~/.ssh/google_compute_engine.pub
            echo "Public key generated."
          else
            echo "Public key already exists."
          fi

          echo "SSH key and permissions set."

      # Step 6: Test SSH connectivity
      - name: Test SSH connectivity
        run: |
          ssh -i ~/.ssh/google_compute_engine \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ubuntu@34.132.171.168 "echo 'SSH successful'"
      
      # Step 7: Run Docker build and container commands
      - name: Build and start Docker container
        run: |
          ssh -i ~/.ssh/google_compute_engine \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${USER}@${INSTANCE_IP} "
                cd /home/kiritisagar &&
                docker build -t my-app . &&
                docker run -d --name my-app-container -p 80:80 my-app
              "
        env:
          USER: your-instance-username
          INSTANCE_IP: your-instance-public-ip
